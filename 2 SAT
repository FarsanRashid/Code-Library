#include <bits/stdc++.h>

using namespace std;

vector<int>g[16005],g_rev[16005];
int visited[16005],tme[16005],tym;
vector<int>v;

int dfs(int no)
{
    int i,j,k;
    visited[no]=1;
    for(i=0,j=g[no].size();i<j;i++)
    {
        k=g[no][i];
        if(!visited[k])
            dfs(k);
    }
    v.push_back(no);
}

int dfs2(int no,int scc_no)
{
    tym++;
    int i,j,k;
    visited[no]=scc_no;
    for(i=0,j=g_rev[no].size();i<j;i++)
    {
        k=g_rev[no][i];
        if(!visited[k])
        {
            dfs2(k,scc_no);
        }
    }
    tme[no]=++tym;
}

int main()
{
    int i,j,k,a,b,m,n,t,cs=0;
    cin>>t;
    while(t--)
    {
        cin>>n>>m;
        for(i=0;i<=2*m;i++)
        {
            g[i].clear();
            g_rev[i].clear();
            visited[i]=0;
        }
        string s,s2;
        while(n--)
        {
            cin>>s;
            s2.clear();
            for(i=1;i<s.size();i++)
            s2.push_back(s[i]);
            stringstream str(s2);
            str>>a;
            if(s[0]=='-')
                a=m+a;
            cin>>s;
            s2.clear();
            for(i=1;i<s.size();i++)
            s2.push_back(s[i]);
            stringstream str2(s2);
            str2>>b;
            if(s[0]=='-')
            b=m+b;
            if(a<=m)
            {
                if(b<=m)
                {
                    g[m+a].push_back(b);
                    g_rev[b].push_back(m+a);
                    g[m+b].push_back(a);
                    g_rev[a].push_back(m+b);
                }
                else
                {
                    g[m+a].push_back(b);
                    g_rev[b].push_back(m+a);
                    g[b-m].push_back(a);
                    g_rev[a].push_back(b-m);
                }
            }
            else
            {
                if(b<=m)
                {
                    g[a-m].push_back(b);
                    g_rev[b].push_back(a-m);
                    g[m+b].push_back(a);
                    g_rev[a].push_back(m+b);
                }
                else
                {
                    g[a-m].push_back(b);
                    g_rev[b].push_back(a-m);
                    g[b-m].push_back(a);
                    g_rev[a].push_back(b-m);
                }
            }
        }
        v.clear();
        for(i=1;i<=2*m;i++)
        {
            if(!visited[i])
            {
                dfs(i);
            }
        }
        reverse(v.begin(),v.end());
        for(i=1;i<=2*m;i++)
        {
            visited[i]=0;
        }

        int scc_no=0;
        tym=0;
        for(i=0,j=v.size();i<j;i++)
        {
            k=v[i];
            if(!visited[k])
            {
                scc_no++;
                dfs2(k,scc_no);
            }
        }
        bool satisfiable=true;
        for(i=1;i<=m;i++)
        {
            if(visited[i]==visited[i+m])
            {
                satisfiable=false;
                break;
            }
        }
        cout<<"Case "<<++cs<<": ";
        if(satisfiable)
        {
            cout<<"Yes\n";
            vector<int>ans;
            for(i=1;i<=m;i++)
            {
                if(tme[i]>tme[m+i])
                ans.push_back(i);
            }
            cout<<ans.size();
            for(i=0,j=ans.size();i<j;i++)
            {
                cout<<" "<<ans[i];
            }
            cout<<endl;
        }
        else
            cout<<"No\n";
    }
    return 0;
}
